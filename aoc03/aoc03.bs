import input;
import set;
import string;
import utils;

function find_duplicate(string: string::String) ~> Char {
    std::assert_equals(string.length mod 2, 0);

    let first: mutable = set::create();
    for let i: mutable = 0; i < string.length / 2; i = i + 1 {
        let char = string::at(string, i);
        set::insert(first@, char);
    }

    let second: mutable = set::create();
    for let i: mutable = string.length / 2; i < string.length; i = i + 1 {
        let char = string::at(string, i);
        set::insert(second@, char);
    }

    let intersection = set::intersection(set::as_const(first@), set::as_const(second@));

    std::assert_equals(set::length(intersection@), 1);

    return set::front(intersection@);
}

function calculate_priority(char: Char) ~> U32 {
    if is_lower(char) {
        return to_u32(char) - to_u32('a') + 1;
    }
    return to_u32(char) - to_u32('A') + 27;
}

function main() {
    let sum: mutable = 0;
    let string: mutable = input::get_first_string();
    loop {
        if string.length == 0 {
            break;
        }
        let duplicate = find_duplicate(string);
        let priority = calculate_priority(duplicate);
        sum = sum + priority;

        let next_string = string.bsm_char + string.length;
        string.length = next_string!;
        string.bsm_char = next_string + 1;
    }
    std::print(sum);
}
