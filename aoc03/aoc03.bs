import input;
import set;
import string;
import utils;

function find_duplicate(string: string::String) ~> Char {
    std::assert_equals(string.length mod 2, 0);

    let first: mutable = set::create();
    for let i: mutable = 0; i < string.length / 2; i = i + 1 {
        let char = string::at(string, i);
        set::insert(first@, char);
    }

    let second: mutable = set::create();
    for let i: mutable = string.length / 2; i < string.length; i = i + 1 {
        let char = string::at(string, i);
        set::insert(second@, char);
    }

    let intersection = set::intersection(set::as_const(first@), set::as_const(second@));

    std::assert_equals(set::length(intersection@), 1);

    return set::front(intersection@);
}

function calculate_priority(char: Char) ~> U32 {
    if is_lower(char) {
        return to_u32(char) - to_u32('a') + 1;
    }
    return to_u32(char) - to_u32('A') + 27;
}

function advance_string(string: ->mutable string::String) {
    let next_string = string!.bsm_char + string!.length;
    string!.length = next_string!;
    string!.bsm_char = next_string + 1;
}

function print_part(part: U32) {
    std::put_char('p');
    std::put_char('a');
    std::put_char('r');
    std::put_char('t');
    std::put_char(' ');
    std::print(part);
    std::put_char(':');
    std::put_char(' ');
}

function main() {
    // part 1
    {
        print_part(1);
        let sum: mutable = 0;
        let string: mutable = input::get_first_string();
        loop {
            if string.length == 0 {
                break;
            }
            let duplicate = find_duplicate(string);
            let priority = calculate_priority(duplicate);
            sum = sum + priority;

            advance_string(string@);
        }
        std::print(sum);
    }

    // part 2
    {
        std::put_char(' ');
        std::put_char(' ');
        print_part(2);
        let string: mutable = input::get_first_string();
        let sum: mutable = 0;
        loop {
            if string.length == 0 {
                break;
            }
            let first: mutable = set::create();
            for let i: mutable = 0; i < string.length; i = i + 1 {
                set::insert(first@, string::at(string, i));
            }
            advance_string(string@);
            std::assert(string.length != 0);

            let second: mutable = set::create();
            for let i: mutable = 0; i < string.length; i = i + 1 {
                set::insert(second@, string::at(string, i));
            }
            advance_string(string@);
            std::assert(string.length != 0);

            let third: mutable = set::create();
            for let i: mutable = 0; i < string.length; i = i + 1 {
                set::insert(third@, string::at(string, i));
            }
            advance_string(string@);

            let first_and_second = set::intersection(set::as_const(first@), set::as_const(second@));
            let result = set::intersection(first_and_second@, set::as_const(third@));
            std::assert_equals(set::length(result@), 1);

            let badge = set::front(result@);
            let priority = calculate_priority(badge);
            sum = sum + priority;
        }
        std::print(sum);
    }
}
